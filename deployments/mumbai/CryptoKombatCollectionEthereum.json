{
  "address": "0x22c1Cf4B01E7E875Aed765F13f83453B656E46fc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseUri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_proxyRegistryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initial",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_maxs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_initials",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "createBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "creators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "depositData",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_quantities",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseMetadataURI",
          "type": "string"
        }
      ],
      "name": "setBaseMetadataURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newProxyRegistryAddress",
          "type": "address"
        }
      ],
      "name": "setProxyRegistryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenMaxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawSingle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0013a599ae4637bd4926a4f0ebe1e76c4d330ebc8bf847808e3dd842bb4c5742",
  "receipt": {
    "to": null,
    "from": "0x97e4f195f4D29354Eb1406221D290F54418F4267",
    "contractAddress": "0x22c1Cf4B01E7E875Aed765F13f83453B656E46fc",
    "transactionIndex": 0,
    "gasUsed": "3648445",
    "logsBloom": "0x
    "blockHash": "0xa0c43b6f94515827887051177e1e742827bc6983988093d8269942899254f70c",
    "transactionHash": "0x0013a599ae4637bd4926a4f0ebe1e76c4d330ebc8bf847808e3dd842bb4c5742",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 22406713,
        "transactionHash": "0x0013a599ae4637bd4926a4f0ebe1e76c4d330ebc8bf847808e3dd842bb4c5742",
        "address": "0x22c1Cf4B01E7E875Aed765F13f83453B656E46fc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000097e4f195f4d29354eb1406221d290f54418f4267"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa0c43b6f94515827887051177e1e742827bc6983988093d8269942899254f70c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22406713,
        "transactionHash": "0x0013a599ae4637bd4926a4f0ebe1e76c4d330ebc8bf847808e3dd842bb4c5742",
        "address": "0x22c1Cf4B01E7E875Aed765F13f83453B656E46fc",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000097e4f195f4d29354eb1406221d290f54418f4267",
          "0x00000000000000000000000097e4f195f4d29354eb1406221d290f54418f4267"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa0c43b6f94515827887051177e1e742827bc6983988093d8269942899254f70c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22406713,
        "transactionHash": "0x0013a599ae4637bd4926a4f0ebe1e76c4d330ebc8bf847808e3dd842bb4c5742",
        "address": "0x22c1Cf4B01E7E875Aed765F13f83453B656E46fc",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x00000000000000000000000097e4f195f4d29354eb1406221d290f54418f4267",
          "0x00000000000000000000000097e4f195f4d29354eb1406221d290f54418f4267"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xa0c43b6f94515827887051177e1e742827bc6983988093d8269942899254f70c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22406713,
        "transactionHash": "0x0013a599ae4637bd4926a4f0ebe1e76c4d330ebc8bf847808e3dd842bb4c5742",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000097e4f195f4d29354eb1406221d290f54418f4267",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002d5dd84ab9f7000000000000000000000000000000000000000000000000004cbc9f34fa80fe800000000000000000000000000000000000000000000002c3040a4845f4810ca90000000000000000000000000000000000000000000000004c8f415cafc707800000000000000000000000000000000000000000000002c30437a61e3f3b03a9",
        "logIndex": 3,
        "blockHash": "0xa0c43b6f94515827887051177e1e742827bc6983988093d8269942899254f70c"
      }
    ],
    "blockNumber": 22406713,
    "cumulativeGasUsed": "3648445",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://uat-eth-api.cryptokombat.com/hero/",
    "0x207Fa8Df3a17D96Ca7EA4f2893fcdCb78a304101"
  ],
  "solcInputHash": "c53bea81c463e814ca9dcbe42ad037b8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initial\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_maxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_initials\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"createBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseMetadataURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newProxyRegistryAddress\",\"type\":\"address\"}],\"name\":\"setProxyRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {EIP712-DOMAIN_SEPARATOR}.\"},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"create(uint256,uint256,bytes)\":{\"details\":\"Creates a new token type and assigns _initial to a sender\",\"params\":{\"_data\":\"Optional data to pass if receiver is contract\",\"_initial\":\"Optional amount to supply the first owner\",\"_max\":\"max supply allowed\"},\"returns\":{\"tokenId\":\"The newly created token ID\"}},\"createBatch(uint256[],uint256[],bytes)\":{\"details\":\"Creates some amount of tokens type and assigns initials to a sender\",\"params\":{\"_initials\":\"Optional amount to supply the first owner\",\"_maxs\":\"max supply allowed\"}},\"deposit(address,bytes)\":{\"details\":\"Should be callable only by ChildChainManager Should handle deposit by minting the required tokens for user Make sure minting is done only by this function\",\"params\":{\"depositData\":\"abi encoded ids array and amounts array\",\"user\":\"user address for whom deposit is being done\"}},\"exists(uint256)\":{\"details\":\"Returns whether the specified token exists by checking to see if it has a creator\",\"params\":{\"_id\":\"uint256 ID of the token to query the existence of\"},\"returns\":{\"_0\":\"bool whether the token exists\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"maxSupply(uint256)\":{\"details\":\"Returns the max quantity for a token ID\",\"params\":{\"_id\":\"uint256 ID of the token to query\"},\"returns\":{\"_0\":\"amount of token in existence\"}},\"mint(address,uint256,uint256,bytes)\":{\"details\":\"Mints some amount of tokens to an address\",\"params\":{\"_data\":\"Data to pass if receiver is contract\",\"_id\":\"Token ID to mint\",\"_quantity\":\"Amount of tokens to mint\",\"_to\":\"Address of the future owner of the token\"}},\"mintBatch(address,uint256[],uint256[],bytes)\":{\"details\":\"Mint tokens for each id in _ids\",\"params\":{\"_data\":\"Data to pass if receiver is contract\",\"_ids\":\"Array of ids to mint\",\"_quantities\":\"Array of amounts of tokens to mint per id\",\"_to\":\"The address to mint tokens to\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setBaseMetadataURI(string)\":{\"details\":\"Will update the base URL of token's URI\",\"params\":{\"_newBaseMetadataURI\":\"New base URL of token's URI\"}},\"setProxyRegistryAddress(address)\":{\"details\":\"Will update the proxyRegistryAddress\",\"params\":{\"_newProxyRegistryAddress\":\"New proxyRegistryAddress\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Returns the total quantity for a token ID\",\"params\":{\"_id\":\"uint256 ID of the token to query\"},\"returns\":{\"_0\":\"amount of token in existence\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawBatch(uint256[],uint256[])\":{\"details\":\"Should burn user's tokens. This transaction will be verified when exiting on root chain\",\"params\":{\"amounts\":\"amounts to withdraw\",\"ids\":\"ids to withdraw\"}},\"withdrawSingle(uint256,uint256)\":{\"details\":\"Should burn user's tokens. This transaction will be verified when exiting on root chain\",\"params\":{\"amount\":\"amount to withdraw\",\"id\":\"id to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(address,bytes)\":{\"notice\":\"called when tokens are deposited on root chain\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\"},\"withdrawBatch(uint256[],uint256[])\":{\"notice\":\"called when user wants to batch withdraw tokens back to root chain\"},\"withdrawSingle(uint256,uint256)\":{\"notice\":\"called when user wants to withdraw single token back to root chain\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC1155/CryptoKombatCollectionEthereum.sol\":\"CryptoKombatCollectionEthereum\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xbda715785876dbfc675396b89ac45bb9f4cceb968133a8258924d163a700f0e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xedf8db444aa542739a0aabe8243a4e8100003aacba9783637a75f16bb556ab44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/ERC1155/ChildERC1155Preset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport './ERC1155Preset.sol';\\n\\ncontract ChildERC1155Preset is ERC1155Preset {\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256('DEPOSITOR_ROLE');\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory _baseUri,\\n        address _proxy\\n    ) ERC1155Preset(name, symbol, _baseUri, _proxy) {}\\n\\n    /**\\n     * @notice called when tokens are deposited on root chain\\n     * @dev Should be callable only by ChildChainManager\\n     * Should handle deposit by minting the required tokens for user\\n     * Make sure minting is done only by this function\\n     * @param user user address for whom deposit is being done\\n     * @param depositData abi encoded ids array and amounts array\\n     */\\n    function deposit(address user, bytes calldata depositData) external {\\n        require(hasRole(DEPOSITOR_ROLE, _msgSender()), '!access');\\n        require(user != address(0), '!user');\\n\\n        (uint256[] memory ids, uint256[] memory amounts, bytes memory data) = abi.decode(\\n            depositData,\\n            (uint256[], uint256[], bytes)\\n        );\\n\\n        require(ids.length == amounts.length, '!length');\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n            require(tokenSupply[id] + amount <= tokenMaxSupply[id], '!max');\\n            tokenSupply[id] = tokenSupply[id] + amount;\\n        }\\n\\n        _mintBatch(user, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @notice called when user wants to withdraw single token back to root chain\\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\n     * @param id id to withdraw\\n     * @param amount amount to withdraw\\n     */\\n    function withdrawSingle(uint256 id, uint256 amount) external {\\n        burn(_msgSender(), id, amount);\\n    }\\n\\n    /**\\n     * @notice called when user wants to batch withdraw tokens back to root chain\\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\n     * @param ids ids to withdraw\\n     * @param amounts amounts to withdraw\\n     */\\n    function withdrawBatch(uint256[] calldata ids, uint256[] calldata amounts) external {\\n        burnBatch(_msgSender(), ids, amounts);\\n    }\\n}\\n\",\"keccak256\":\"0x12cbc8056972fe7298a96af0f35e3ae2b05e9d2d368d44b73bd548827030ce65\",\"license\":\"MIT\"},\"contracts/ERC1155/CryptoKombatCollectionEthereum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport './ChildERC1155Preset.sol';\\n\\ncontract CryptoKombatCollectionEthereum is ChildERC1155Preset {\\n    constructor(string memory _baseUri, address _proxyRegistryAddress)\\n        ChildERC1155Preset('Crypto Kombat Collection Ethereum', 'CKCE', _baseUri, _proxyRegistryAddress)\\n    {}\\n}\\n\",\"keccak256\":\"0x8723601d593de4195ebd67cb097ef58980f3740f93f7ad97ea872787d8923ff7\",\"license\":\"MIT\"},\"contracts/ERC1155/ERC1155Preset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol';\\nimport './ERC1155Tradable.sol';\\n\\ncontract ERC1155Preset is Context, ERC1155Tradable, EIP712 {\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory _baseUri,\\n        address _proxy\\n    ) ERC1155Tradable(name, symbol, _proxy) EIP712(name, '1') {\\n        _setBaseMetadataURI(_baseUri);\\n    }\\n\\n    function _msgSender() internal view override returns (address sender) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n        return sender;\\n    }\\n\\n    /**\\n     * @dev See {EIP712-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev Returns whether the specified token exists by checking to see if it has a creator\\n     * @param _id uint256 ID of the token to query the existence of\\n     * @return bool whether the token exists\\n     */\\n    function exists(uint256 _id) external view returns (bool) {\\n        return creators[_id] != address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x0fa181e0708821918f7a68ab95cb6b0fdb0c88e128b5952a40e5643e160669d3\",\"license\":\"MIT\"},\"contracts/ERC1155/ERC1155Tradable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/ERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol';\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\\n/**\\n * @title ERC1155Tradable\\n * ERC1155Tradable - ERC1155 contract that whitelists an operator address, \\n * has create and mint functionality, and supports useful standards from OpenZeppelin,\\n  like _exists(), name(), symbol(), and totalSupply()\\n */\\ncontract ERC1155Tradable is AccessControl, Ownable, ERC1155, ERC1155Burnable {\\n    bytes32 public constant MINTER_ROLE = keccak256('MINTER_ROLE');\\n\\n    using Strings for string;\\n\\n    string internal baseMetadataURI;\\n    address proxyRegistryAddress;\\n    uint256 private _currentTokenID = 0;\\n\\n    mapping(uint256 => address) public creators;\\n    mapping(uint256 => uint256) public tokenSupply;\\n    mapping(uint256 => uint256) public tokenMaxSupply;\\n    // Contract name\\n    string public name;\\n    // Contract symbol\\n    string public symbol;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _proxyRegistryAddress\\n    ) ERC1155('') {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n\\n        name = _name;\\n        symbol = _symbol;\\n        proxyRegistryAddress = _proxyRegistryAddress;\\n    }\\n\\n    modifier onlyAdminOrOwner() {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) || (owner() == _msgSender()),\\n            'ERC1155Tradable: must have admin or owner role'\\n        );\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        require(hasRole(MINTER_ROLE, _msgSender()), 'ERC1155Tradable: must have minter role');\\n        _;\\n    }\\n\\n    function uri(uint256 _id) public view override returns (string memory) {\\n        require(_exists(_id), 'ERC1155Tradable: token must exists');\\n        return string(abi.encodePacked(baseMetadataURI, Strings.toString(_id)));\\n    }\\n\\n    /**\\n     * @dev Returns the total quantity for a token ID\\n     * @param _id uint256 ID of the token to query\\n     * @return amount of token in existence\\n     */\\n    function totalSupply(uint256 _id) public view returns (uint256) {\\n        return tokenSupply[_id];\\n    }\\n\\n    /**\\n     * @dev Returns the max quantity for a token ID\\n     * @param _id uint256 ID of the token to query\\n     * @return amount of token in existence\\n     */\\n    function maxSupply(uint256 _id) public view returns (uint256) {\\n        return tokenMaxSupply[_id];\\n    }\\n\\n    /**\\n     * @dev Will update the proxyRegistryAddress\\n     * @param _newProxyRegistryAddress New proxyRegistryAddress\\n     */\\n    function setProxyRegistryAddress(address _newProxyRegistryAddress) public onlyAdminOrOwner {\\n        proxyRegistryAddress = _newProxyRegistryAddress;\\n    }\\n\\n    /**\\n     * @dev Will update the base URL of token's URI\\n     * @param _newBaseMetadataURI New base URL of token's URI\\n     */\\n    function setBaseMetadataURI(string memory _newBaseMetadataURI) public onlyAdminOrOwner {\\n        _setBaseMetadataURI(_newBaseMetadataURI);\\n    }\\n\\n    /**\\n     * @dev Creates a new token type and assigns _initial to a sender\\n     * @param _max max supply allowed\\n     * @param _initial Optional amount to supply the first owner\\n     * @param _data Optional data to pass if receiver is contract\\n     * @return tokenId The newly created token ID\\n     */\\n    function create(\\n        uint256 _max,\\n        uint256 _initial,\\n        bytes memory _data\\n    ) external onlyAdminOrOwner returns (uint256 tokenId) {\\n        //TODO Need to test lte condition\\n        require(_initial <= _max, 'ERC1155Tradable: Initial supply cannot be more than max supply');\\n        uint256 id = _getNextTokenID();\\n        _incrementTokenTypeId();\\n        creators[id] = _msgSender();\\n\\n        if (_initial != 0) {\\n            _mint(_msgSender(), id, _initial, _data);\\n        }\\n        tokenSupply[id] = _initial;\\n        tokenMaxSupply[id] = _max;\\n        return id;\\n    }\\n\\n    /**\\n     * @dev Creates some amount of tokens type and assigns initials to a sender\\n     * @param _maxs max supply allowed\\n     * @param _initials Optional amount to supply the first owner\\n     */\\n    function createBatch(\\n        uint256[] memory _maxs,\\n        uint256[] memory _initials,\\n        bytes memory _data\\n    ) external onlyAdminOrOwner {\\n        require(_maxs.length == _initials.length, 'ERC1155Tradable: maxs and initials length mismatch');\\n\\n        uint256[] memory ids = new uint256[](_maxs.length);\\n        uint256[] memory quantities = new uint256[](_maxs.length);\\n\\n        for (uint256 i = 0; i < _maxs.length; i++) {\\n            uint256 max = _maxs[i];\\n            uint256 initial = _initials[i];\\n\\n            //TODO Need to test lte condition\\n            require(initial <= max, 'ERC1155Tradable: Initial supply cannot be more than max supply');\\n\\n            uint256 tokenId = _getNextTokenID();\\n            _incrementTokenTypeId();\\n            creators[tokenId] = _msgSender();\\n\\n            tokenSupply[tokenId] = initial;\\n            tokenMaxSupply[tokenId] = max;\\n\\n            ids[i] = tokenId;\\n            quantities[i] = initial;\\n        }\\n\\n        _mintBatch(_msgSender(), ids, quantities, _data);\\n    }\\n\\n    /**\\n     * @dev Mints some amount of tokens to an address\\n     * @param _to          Address of the future owner of the token\\n     * @param _id          Token ID to mint\\n     * @param _quantity    Amount of tokens to mint\\n     * @param _data        Data to pass if receiver is contract\\n     */\\n    function mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _quantity,\\n        bytes memory _data\\n    ) public onlyMinter {\\n        require(tokenSupply[_id] + _quantity <= tokenMaxSupply[_id], 'ERC1155Tradable: Max supply reached');\\n        tokenSupply[_id] = tokenSupply[_id] + _quantity;\\n        _mint(_to, _id, _quantity, _data);\\n    }\\n\\n    /**\\n     * @dev Mint tokens for each id in _ids\\n     * @param _to          The address to mint tokens to\\n     * @param _ids         Array of ids to mint\\n     * @param _quantities  Array of amounts of tokens to mint per id\\n     * @param _data        Data to pass if receiver is contract\\n     */\\n    function mintBatch(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _quantities,\\n        bytes memory _data\\n    ) public onlyMinter {\\n        require(_to != address(0), 'ERC1155Tradable: mint to the zero address');\\n        require(_ids.length == _quantities.length, 'ERC1155Tradable: ids and amounts length mismatch');\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            uint256 id = _ids[i];\\n            uint256 quantity = _quantities[i];\\n            //TODO Need to test lte condition\\n            require(tokenSupply[id] + quantity <= tokenMaxSupply[id], 'ERC1155Tradable: Max supply reached');\\n            tokenSupply[id] = tokenSupply[id] + quantity;\\n        }\\n        _mintBatch(_to, _ids, _quantities, _data);\\n    }\\n\\n    /**\\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        public\\n        view\\n        override\\n        returns (bool isOperator)\\n    {\\n        // Whitelist OpenSea proxy contract for easy trading.\\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\n        if (address(proxyRegistry.proxies(_owner)) == _operator) {\\n            return true;\\n        }\\n\\n        return ERC1155.isApprovedForAll(_owner, _operator);\\n    }\\n\\n    /**\\n     * @dev Returns whether the specified token exists by checking to see if it has a creator\\n     * @param _id uint256 ID of the token to query the existence of\\n     * @return bool whether the token exists\\n     */\\n    function _exists(uint256 _id) internal view returns (bool) {\\n        return creators[_id] != address(0);\\n    }\\n\\n    /**\\n     * @dev calculates the next token ID based on value of _currentTokenID\\n     * @return uint256 for the next token ID\\n     */\\n    function _getNextTokenID() private view returns (uint256) {\\n        return _currentTokenID + 1;\\n    }\\n\\n    /**\\n     * @dev increments the value of _currentTokenID\\n     */\\n    function _incrementTokenTypeId() private {\\n        _currentTokenID++;\\n    }\\n\\n    /**\\n     * @notice Will update the base URL of token's URI\\n     * @param _newBaseMetadataURI New base URL of token's URI\\n     */\\n    function _setBaseMetadataURI(string memory _newBaseMetadataURI) internal {\\n        baseMetadataURI = _newBaseMetadataURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControl, ERC1155)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xfbd67e13750f369d3ff96d404176771fc3f19c06415ff3e0548b32307f37183a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61012060405260006007553480156200001757600080fd5b50604051620041e9380380620041e98339810160408190526200003a9162000452565b604051806060016040528060218152602001620041c86021913960405180604001604052806004815260200163434b434560e01b81525083838383838383604051806040016040528060018152602001603160f81b81525085858460405180602001604052806000815250620000bf620000b96200020260201b60201c565b62000261565b620000ca81620002b3565b50620000e16000620000db62000202565b620002cc565b620001107f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6620000db62000202565b82516200012590600b9060208601906200038f565b5081516200013b90600c9060208501906200038f565b50600680546001600160a01b0319166001600160a01b03929092169190911790555050815160209283012081519183019190912060c082815260e08290524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81890181905281830197909752606081019590955260808086019390935230858301528051808603909201825293909201909252805193019290922090915261010052620001f282620002d8565b5050505050505050505062000590565b6000333014156200025b57600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031691506200025e9050565b50335b90565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8051620002c89060049060208401906200038f565b5050565b620002c88282620002ed565b8051620002c89060059060208401906200038f565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620002c8576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200034b62000202565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b8280546200039d906200053d565b90600052602060002090601f016020900481019282620003c157600085556200040c565b82601f10620003dc57805160ff19168380011785556200040c565b828001600101855582156200040c579182015b828111156200040c578251825591602001919060010190620003ef565b506200041a9291506200041e565b5090565b5b808211156200041a57600081556001016200041f565b80516001600160a01b03811681146200044d57600080fd5b919050565b6000806040838503121562000465578182fd5b82516001600160401b03808211156200047c578384fd5b818501915085601f83011262000490578384fd5b815181811115620004a557620004a56200057a565b604051601f8201601f19908116603f01168101908382118183101715620004d057620004d06200057a565b81604052828152602093508884848701011115620004ec578687fd5b8691505b828210156200050f5784820184015181830185015290830190620004f0565b828211156200052057868484830101525b95506200053291505085820162000435565b925050509250929050565b600181811c908216806200055257607f821691505b602082108114156200057457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160e05161010051613bf3620005d560003960006120b801526000612107015260006120e2015260006120660152600061208f0152613bf36000f3fe608060405234801561001057600080fd5b506004361061023b5760003560e01c8063715018a61161013b578063bd85b039116100b8578063d547741f1161007c578063d547741f1461057a578063e985e9c51461058d578063f242432a146105a0578063f2fde38b146105b3578063f5298aca146105c657600080fd5b8063bd85b039146104e4578063cd53d08e14610504578063cf2c52cb1461052d578063d26ea6c014610540578063d53913931461055357600080fd5b806391d14854116100ff57806391d148541461048757806395d89b411461049a578063a217fddf146104a2578063a22cb465146104aa578063a3b0b5a3146104bd57600080fd5b8063715018a614610414578063731133e91461041c5780637e518ec81461042f578063869f7594146104425780638da5cb5b1461046257600080fd5b8063248a9ca3116101c957806336568abe1161018d57806336568abe146103905780634e1273f4146103a35780634f558e79146103c35780635c5fb521146103ee5780636b20c4541461040157600080fd5b8063248a9ca31461031f5780632693ebf2146103425780632eb2c2d6146103625780632f2ff15d146103755780633644e5151461038857600080fd5b806306fdde031161021057806306fdde03146102bc5780630e89341c146102d15780631e80165b146102e45780631f7fdffa146102f95780632262f53f1461030c57600080fd5b80624221f014610240578062fdd58e1461027357806301ffc9a71461028657806306f9363c146102a9575b600080fd5b61026061024e36600461322a565b600a6020526000908152604090205481565b6040519081526020015b60405180910390f35b610260610281366004612fca565b6105d9565b610299610294366004613266565b610675565b604051901515815260200161026a565b6102606102b7366004613320565b610680565b6102c4610786565b60405161026a91906135db565b6102c46102df36600461322a565b610814565b6102f76102f23660046131b1565b6108b8565b005b6102f7610307366004612e84565b610b9b565b6102f761031a3660046132ff565b610db1565b61026061032d36600461322a565b60009081526020819052604090206001015490565b61026061035036600461322a565b60096020526000908152604090205481565b6102f7610370366004612d03565b610dc7565b6102f7610383366004613242565b610e69565b610260610e9b565b6102f761039e366004613242565b610eaa565b6103b66103b136600461307d565b610f34565b60405161026a91906135a3565b6102996103d136600461322a565b6000908152600860205260409020546001600160a01b0316151590565b6102f76103fc366004613149565b611095565b6102f761040f366004612e12565b61110a565b6102f761115f565b6102f761042a366004613029565b6111e4565b6102f761043d3660046132ba565b6112a5565b61026061045036600461322a565b6000908152600a602052604090205490565b6001546001600160a01b03165b6040516001600160a01b03909116815260200161026a565b610299610495366004613242565b61130e565b6102c4611337565b610260600081565b6102f76104b8366004612f1a565b611344565b6102607f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a981565b6102606104f236600461322a565b60009081526009602052604090205490565b61046f61051236600461322a565b6008602052600090815260409020546001600160a01b031681565b6102f761053b366004612f4b565b611458565b6102f761054e366004612caf565b611660565b6102607f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102f7610588366004613242565b6116df565b61029961059b366004612ccb565b611707565b6102f76105ae366004612dac565b6117d7565b6102f76105c1366004612caf565b61182e565b6102f76105d4366004612ff5565b611915565b60006001600160a01b03831661064a5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b600061066f8261196a565b600061068e816104956119aa565b806106c2575061069c6119aa565b6001600160a01b03166106b76001546001600160a01b031690565b6001600160a01b0316145b6106de5760405162461bcd60e51b81526004016106419061374e565b838311156106fe5760405162461bcd60e51b8152600401610641906138f5565b6000610708611a07565b9050610712611a18565b61071a6119aa565b600082815260086020526040902080546001600160a01b0319166001600160a01b0392909216919091179055831561075f5761075f6107576119aa565b828686611a2f565b6000818152600960209081526040808320879055600a909152902085905590509392505050565b600b805461079390613a1a565b80601f01602080910402602001604051908101604052809291908181526020018280546107bf90613a1a565b801561080c5780601f106107e15761010080835404028352916020019161080c565b820191906000526020600020905b8154815290600101906020018083116107ef57829003601f168201915b505050505081565b6000818152600860205260409020546060906001600160a01b03166108865760405162461bcd60e51b815260206004820152602260248201527f455243313135355472616461626c653a20746f6b656e206d7573742065786973604482015261747360f01b6064820152608401610641565b600561089183611b12565b6040516020016108a29291906133e5565b6040516020818303038152906040529050919050565b6108c560006104956119aa565b806108f957506108d36119aa565b6001600160a01b03166108ee6001546001600160a01b031690565b6001600160a01b0316145b6109155760405162461bcd60e51b81526004016106419061374e565b81518351146109815760405162461bcd60e51b815260206004820152603260248201527f455243313135355472616461626c653a206d61787320616e6420696e697469616044820152710d8e640d8cadccee8d040dad2e6dac2e8c6d60731b6064820152608401610641565b600083516001600160401b038111156109aa57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156109d3578160200160208202803683370190505b509050600084516001600160401b038111156109ff57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610a28578160200160208202803683370190505b50905060005b8551811015610b80576000868281518110610a5957634e487b7160e01b600052603260045260246000fd5b602002602001015190506000868381518110610a8557634e487b7160e01b600052603260045260246000fd5b6020026020010151905081811115610aaf5760405162461bcd60e51b8152600401610641906138f5565b6000610ab9611a07565b9050610ac3611a18565b610acb6119aa565b600082815260086020908152604080832080546001600160a01b0319166001600160a01b03959095169490941790935560098152828220859055600a90522083905585518190879086908110610b3157634e487b7160e01b600052603260045260246000fd5b60200260200101818152505081858581518110610b5e57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505050508080610b7890613a81565b915050610a2e565b50610b94610b8c6119aa565b838386611c2b565b5050505050565b610bc77f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66104956119aa565b610be35760405162461bcd60e51b815260040161064190613636565b6001600160a01b038416610c4b5760405162461bcd60e51b815260206004820152602960248201527f455243313135355472616461626c653a206d696e7420746f20746865207a65726044820152686f206164647265737360b81b6064820152608401610641565b8151835114610cb55760405162461bcd60e51b815260206004820152603060248201527f455243313135355472616461626c653a2069647320616e6420616d6f756e747360448201526f040d8cadccee8d040dad2e6dac2e8c6d60831b6064820152608401610641565b60005b8351811015610d9e576000848281518110610ce357634e487b7160e01b600052603260045260246000fd5b602002602001015190506000848381518110610d0f57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516000848152600a83526040808220546009909452902054909250610d40908390613975565b1115610d5e5760405162461bcd60e51b815260040161064190613829565b600082815260096020526040902054610d78908290613975565b600092835260096020526040909220919091555080610d9681613a81565b915050610cb8565b50610dab84848484611c2b565b50505050565b610dc3610dbc6119aa565b8383611915565b5050565b610dcf6119aa565b6001600160a01b0316856001600160a01b03161480610df55750610df58561059b6119aa565b610e5c5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610641565b610b948585858585611dad565b600082815260208190526040902060010154610e8c81610e876119aa565b611f79565b610e968383611fdd565b505050565b6000610ea5612062565b905090565b610eb26119aa565b6001600160a01b0316816001600160a01b031614610f2a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610641565b610dc38282612155565b60608151835114610f995760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610641565b600083516001600160401b03811115610fc257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610feb578160200160208202803683370190505b50905060005b845181101561108d5761105285828151811061101d57634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061104557634e487b7160e01b600052603260045260246000fd5b60200260200101516105d9565b82828151811061107257634e487b7160e01b600052603260045260246000fd5b602090810291909101015261108681613a81565b9050610ff1565b509392505050565b610dab6110a06119aa565b8585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061110a92505050565b6111126119aa565b6001600160a01b0316836001600160a01b0316148061113857506111388361059b6119aa565b6111545760405162461bcd60e51b8152600401610641906136c0565b610e968383836121d8565b6111676119aa565b6001600160a01b03166111826001546001600160a01b031690565b6001600160a01b0316146111d85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610641565b6111e2600061238c565b565b6112107f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66104956119aa565b61122c5760405162461bcd60e51b815260040161064190613636565b6000838152600a6020908152604080832054600990925290912054611252908490613975565b11156112705760405162461bcd60e51b815260040161064190613829565b60008381526009602052604090205461128a908390613975565b600084815260096020526040902055610dab84848484611a2f565b6112b260006104956119aa565b806112e657506112c06119aa565b6001600160a01b03166112db6001546001600160a01b031690565b6001600160a01b0316145b6113025760405162461bcd60e51b81526004016106419061374e565b61130b816123de565b50565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600c805461079390613a1a565b816001600160a01b03166113566119aa565b6001600160a01b031614156113bf5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610641565b80600360006113cc6119aa565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556114106119aa565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161144c911515815260200190565b60405180910390a35050565b6114847f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a96104956119aa565b6114ba5760405162461bcd60e51b81526020600482015260076024820152662161636365737360c81b6044820152606401610641565b6001600160a01b0383166114f85760405162461bcd60e51b815260206004820152600560248201526410bab9b2b960d91b6044820152606401610641565b60008080611508848601866131b1565b92509250925081518351146115495760405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b6044820152606401610641565b60005b835181101561164b57600084828151811061157757634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008483815181106115a357634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516000848152600a835260408082205460099094529020549092506115d4908390613975565b111561160b5760405162461bcd60e51b815260040161064190602080825260049082015263042dac2f60e31b604082015260600190565b600082815260096020526040902054611625908290613975565b60009283526009602052604090922091909155508061164381613a81565b91505061154c565b5061165886848484611c2b565b505050505050565b61166d60006104956119aa565b806116a1575061167b6119aa565b6001600160a01b03166116966001546001600160a01b031690565b6001600160a01b0316145b6116bd5760405162461bcd60e51b81526004016106419061374e565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152602081905260409020600101546116fd81610e876119aa565b610e968383612155565b60065460405163c455279160e01b81526001600160a01b03848116600483015260009281169190841690829063c45527919060240160206040518083038186803b15801561175457600080fd5b505afa158015611768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178c919061329e565b6001600160a01b031614156117a557600191505061066f565b6001600160a01b0380851660009081526003602090815260408083209387168352929052205460ff165b949350505050565b6117df6119aa565b6001600160a01b0316856001600160a01b0316148061180557506118058561059b6119aa565b6118215760405162461bcd60e51b8152600401610641906136c0565b610b9485858585856123f1565b6118366119aa565b6001600160a01b03166118516001546001600160a01b031690565b6001600160a01b0316146118a75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610641565b6001600160a01b03811661190c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610641565b61130b8161238c565b61191d6119aa565b6001600160a01b0316836001600160a01b0316148061194357506119438361059b6119aa565b61195f5760405162461bcd60e51b8152600401610641906136c0565b610e9683838361251d565b60006001600160e01b03198216636cdb3d1360e11b148061199b57506001600160e01b031982166303a24d0760e21b145b8061066f575061066f8261262d565b600033301415611a0157600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150611a049050565b50335b90565b60006007546001610ea59190613975565b60078054906000611a2883613a81565b9190505550565b6001600160a01b038416611a555760405162461bcd60e51b8152600401610641906138b4565b6000611a5f6119aa565b9050611a8081600087611a7188612662565b611a7a88612662565b876126bb565b60008481526002602090815260408083206001600160a01b038916845290915281208054859290611ab2908490613975565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610b94816000878787876126c0565b606081611b365750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611b605780611b4a81613a81565b9150611b599050600a8361398d565b9150611b3a565b6000816001600160401b03811115611b8857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611bb2576020820181803683370190505b5090505b84156117cf57611bc76001836139c0565b9150611bd4600a86613a9c565b611bdf906030613975565b60f81b818381518110611c0257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611c24600a8661398d565b9450611bb6565b6001600160a01b038416611c515760405162461bcd60e51b8152600401610641906138b4565b8151835114611c725760405162461bcd60e51b81526004016106419061386c565b6000611c7c6119aa565b9050611c8d816000878787876126bb565b60005b8451811015611d4557838181518110611cb957634e487b7160e01b600052603260045260246000fd5b602002602001015160026000878481518110611ce557634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611d2d9190613975565b90915550819050611d3d81613a81565b915050611c90565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611d969291906135b6565b60405180910390a4610b948160008787878761282b565b8151835114611dce5760405162461bcd60e51b81526004016106419061386c565b6001600160a01b038416611df45760405162461bcd60e51b815260040161064190613709565b6000611dfe6119aa565b9050611e0e8187878787876126bb565b60005b8451811015611f13576000858281518110611e3c57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110611e6857634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526002835260408082206001600160a01b038e168352909352919091205490915081811015611eb95760405162461bcd60e51b8152600401610641906137df565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611ef8908490613975565b9250508190555050505080611f0c90613a81565b9050611e11565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611f639291906135b6565b60405180910390a461165881878787878761282b565b611f83828261130e565b610dc357611f9b816001600160a01b031660146128f5565b611fa68360206128f5565b604051602001611fb792919061348b565b60408051601f198184030181529082905262461bcd60e51b8252610641916004016135db565b611fe7828261130e565b610dc3576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561201e6119aa565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60007f00000000000000000000000000000000000000000000000000000000000000004614156120b157507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b61215f828261130e565b15610dc3576000828152602081815260408083206001600160a01b03851684529091529020805460ff191690556121946119aa565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6001600160a01b0383166121fe5760405162461bcd60e51b81526004016106419061379c565b805182511461221f5760405162461bcd60e51b81526004016106419061386c565b60006122296119aa565b9050612249818560008686604051806020016040528060008152506126bb565b60005b835181101561232d57600084828151811061227757634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008483815181106122a357634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526002835260408082206001600160a01b038c1683529093529190912054909150818110156122f45760405162461bcd60e51b81526004016106419061367c565b60009283526002602090815260408085206001600160a01b038b168652909152909220910390558061232581613a81565b91505061224c565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161237e9291906135b6565b60405180910390a450505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8051610dc3906005906020840190612add565b6001600160a01b0384166124175760405162461bcd60e51b815260040161064190613709565b60006124216119aa565b9050612432818787611a7188612662565b60008481526002602090815260408083206001600160a01b038a168452909152902054838110156124755760405162461bcd60e51b8152600401610641906137df565b60008581526002602090815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906124b4908490613975565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46125148288888888886126c0565b50505050505050565b6001600160a01b0383166125435760405162461bcd60e51b81526004016106419061379c565b600061254d6119aa565b905061257d8185600061255f87612662565b61256887612662565b604051806020016040528060008152506126bb565b60008381526002602090815260408083206001600160a01b0388168452909152902054828110156125c05760405162461bcd60e51b81526004016106419061367c565b60008481526002602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b60006001600160e01b03198216637965db0b60e01b148061066f57506301ffc9a760e01b6001600160e01b031983161461066f565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106126aa57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b611658565b6001600160a01b0384163b156116585760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612704908990899088908890889060040161355e565b602060405180830381600087803b15801561271e57600080fd5b505af192505050801561274e575060408051601f3d908101601f1916820190925261274b91810190613282565b60015b6127fb5761275a613af2565b806308c379a01415612794575061276f613b09565b8061277a5750612796565b8060405162461bcd60e51b815260040161064191906135db565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610641565b6001600160e01b0319811663f23a6e6160e01b146125145760405162461bcd60e51b8152600401610641906135ee565b6001600160a01b0384163b156116585760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061286f9089908990889088908890600401613500565b602060405180830381600087803b15801561288957600080fd5b505af19250505080156128b9575060408051601f3d908101601f191682019092526128b691810190613282565b60015b6128c55761275a613af2565b6001600160e01b0319811663bc197c8160e01b146125145760405162461bcd60e51b8152600401610641906135ee565b606060006129048360026139a1565b61290f906002613975565b6001600160401b0381111561293457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561295e576020820181803683370190505b509050600360fc1b8160008151811061298757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106129c457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006129e88460026139a1565b6129f3906001613975565b90505b6001811115612a87576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612a3557634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110612a5957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93612a8081613a03565b90506129f6565b508315612ad65760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610641565b9392505050565b828054612ae990613a1a565b90600052602060002090601f016020900481019282612b0b5760008555612b51565b82601f10612b2457805160ff1916838001178555612b51565b82800160010185558215612b51579182015b82811115612b51578251825591602001919060010190612b36565b50612b5d929150612b61565b5090565b5b80821115612b5d5760008155600101612b62565b60006001600160401b03831115612b8f57612b8f613adc565b604051612ba6601f8501601f191660200182613a55565b809150838152848484011115612bbb57600080fd5b83836020830137600060208583010152509392505050565b60008083601f840112612be4578182fd5b5081356001600160401b03811115612bfa578182fd5b6020830191508360208260051b8501011115612c1557600080fd5b9250929050565b600082601f830112612c2c578081fd5b81356020612c3982613952565b604051612c468282613a55565b8381528281019150858301600585901b87018401881015612c65578586fd5b855b85811015612c8357813584529284019290840190600101612c67565b5090979650505050505050565b600082601f830112612ca0578081fd5b612ad683833560208501612b76565b600060208284031215612cc0578081fd5b8135612ad681613b92565b60008060408385031215612cdd578081fd5b8235612ce881613b92565b91506020830135612cf881613b92565b809150509250929050565b600080600080600060a08688031215612d1a578081fd5b8535612d2581613b92565b94506020860135612d3581613b92565b935060408601356001600160401b0380821115612d50578283fd5b612d5c89838a01612c1c565b94506060880135915080821115612d71578283fd5b612d7d89838a01612c1c565b93506080880135915080821115612d92578283fd5b50612d9f88828901612c90565b9150509295509295909350565b600080600080600060a08688031215612dc3578081fd5b8535612dce81613b92565b94506020860135612dde81613b92565b9350604086013592506060860135915060808601356001600160401b03811115612e06578182fd5b612d9f88828901612c90565b600080600060608486031215612e26578283fd5b8335612e3181613b92565b925060208401356001600160401b0380821115612e4c578384fd5b612e5887838801612c1c565b93506040860135915080821115612e6d578283fd5b50612e7a86828701612c1c565b9150509250925092565b60008060008060808587031215612e99578182fd5b8435612ea481613b92565b935060208501356001600160401b0380821115612ebf578384fd5b612ecb88838901612c1c565b94506040870135915080821115612ee0578384fd5b612eec88838901612c1c565b93506060870135915080821115612f01578283fd5b50612f0e87828801612c90565b91505092959194509250565b60008060408385031215612f2c578182fd5b8235612f3781613b92565b915060208301358015158114612cf8578182fd5b600080600060408486031215612f5f578081fd5b8335612f6a81613b92565b925060208401356001600160401b0380821115612f85578283fd5b818601915086601f830112612f98578283fd5b813581811115612fa6578384fd5b876020828501011115612fb7578384fd5b6020830194508093505050509250925092565b60008060408385031215612fdc578182fd5b8235612fe781613b92565b946020939093013593505050565b600080600060608486031215613009578081fd5b833561301481613b92565b95602085013595506040909401359392505050565b6000806000806080858703121561303e578182fd5b843561304981613b92565b9350602085013592506040850135915060608501356001600160401b03811115613071578182fd5b612f0e87828801612c90565b6000806040838503121561308f578182fd5b82356001600160401b03808211156130a5578384fd5b818501915085601f8301126130b8578384fd5b813560206130c582613952565b6040516130d28282613a55565b8381528281019150858301600585901b870184018b10156130f1578889fd5b8896505b8487101561311c57803561310881613b92565b8352600196909601959183019183016130f5565b5096505086013592505080821115613132578283fd5b5061313f85828601612c1c565b9150509250929050565b6000806000806040858703121561315e578182fd5b84356001600160401b0380821115613174578384fd5b61318088838901612bd3565b90965094506020870135915080821115613198578384fd5b506131a587828801612bd3565b95989497509550505050565b6000806000606084860312156131c5578081fd5b83356001600160401b03808211156131db578283fd5b6131e787838801612c1c565b945060208601359150808211156131fc578283fd5b61320887838801612c1c565b9350604086013591508082111561321d578283fd5b50612e7a86828701612c90565b60006020828403121561323b578081fd5b5035919050565b60008060408385031215613254578182fd5b823591506020830135612cf881613b92565b600060208284031215613277578081fd5b8135612ad681613ba7565b600060208284031215613293578081fd5b8151612ad681613ba7565b6000602082840312156132af578081fd5b8151612ad681613b92565b6000602082840312156132cb578081fd5b81356001600160401b038111156132e0578182fd5b8201601f810184136132f0578182fd5b6117cf84823560208401612b76565b60008060408385031215613311578182fd5b50508035926020909101359150565b600080600060608486031215613334578081fd5b833592506020840135915060408401356001600160401b03811115613357578182fd5b612e7a86828701612c90565b6000815180845260208085019450808401835b8381101561339257815187529582019590820190600101613376565b509495945050505050565b600081518084526133b58160208601602086016139d7565b601f01601f19169290920160200192915050565b600081516133db8185602086016139d7565b9290920192915050565b600080845482600182811c91508083168061340157607f831692505b602080841082141561342157634e487b7160e01b87526022600452602487fd5b818015613435576001811461344657613472565b60ff19861689528489019650613472565b60008b815260209020885b8681101561346a5781548b820152908501908301613451565b505084890196505b50505050505061348281856133c9565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516134c38160178501602088016139d7565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516134f48160288401602088016139d7565b01602801949350505050565b6001600160a01b0386811682528516602082015260a06040820181905260009061352c90830186613363565b828103606084015261353e8186613363565b90508281036080840152613552818561339d565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906135989083018461339d565b979650505050505050565b602081526000612ad66020830184613363565b6040815260006135c96040830185613363565b82810360208401526134828185613363565b602081526000612ad6602083018461339d565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526026908201527f455243313135355472616461626c653a206d7573742068617665206d696e74656040820152657220726f6c6560d01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602e908201527f455243313135355472616461626c653a206d75737420686176652061646d696e60408201526d206f72206f776e657220726f6c6560901b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526023908201527f455243313135355472616461626c653a204d617820737570706c7920726561636040820152621a195960ea1b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6020808252603e908201527f455243313135355472616461626c653a20496e697469616c20737570706c792060408201527f63616e6e6f74206265206d6f7265207468616e206d617820737570706c790000606082015260800190565b60006001600160401b0382111561396b5761396b613adc565b5060051b60200190565b6000821982111561398857613988613ab0565b500190565b60008261399c5761399c613ac6565b500490565b60008160001904831182151516156139bb576139bb613ab0565b500290565b6000828210156139d2576139d2613ab0565b500390565b60005b838110156139f25781810151838201526020016139da565b83811115610dab5750506000910152565b600081613a1257613a12613ab0565b506000190190565b600181811c90821680613a2e57607f821691505b60208210811415613a4f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b0381118282101715613a7a57613a7a613adc565b6040525050565b6000600019821415613a9557613a95613ab0565b5060010190565b600082613aab57613aab613ac6565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115611a0457600481823e5160e01c90565b600060443d1015613b175790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715613b4657505050505090565b8285019150815181811115613b5e5750505050505090565b843d8701016020828501011115613b785750505050505090565b613b8760208286010187613a55565b509095945050505050565b6001600160a01b038116811461130b57600080fd5b6001600160e01b03198116811461130b57600080fdfea2646970667358221220195efc1f2d8e33c8a5305e8fa3551944720491322db875df25f9da079070019964736f6c6343000804003343727970746f204b6f6d62617420436f6c6c656374696f6e20457468657265756d",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023b5760003560e01c8063715018a61161013b578063bd85b039116100b8578063d547741f1161007c578063d547741f1461057a578063e985e9c51461058d578063f242432a146105a0578063f2fde38b146105b3578063f5298aca146105c657600080fd5b8063bd85b039146104e4578063cd53d08e14610504578063cf2c52cb1461052d578063d26ea6c014610540578063d53913931461055357600080fd5b806391d14854116100ff57806391d148541461048757806395d89b411461049a578063a217fddf146104a2578063a22cb465146104aa578063a3b0b5a3146104bd57600080fd5b8063715018a614610414578063731133e91461041c5780637e518ec81461042f578063869f7594146104425780638da5cb5b1461046257600080fd5b8063248a9ca3116101c957806336568abe1161018d57806336568abe146103905780634e1273f4146103a35780634f558e79146103c35780635c5fb521146103ee5780636b20c4541461040157600080fd5b8063248a9ca31461031f5780632693ebf2146103425780632eb2c2d6146103625780632f2ff15d146103755780633644e5151461038857600080fd5b806306fdde031161021057806306fdde03146102bc5780630e89341c146102d15780631e80165b146102e45780631f7fdffa146102f95780632262f53f1461030c57600080fd5b80624221f014610240578062fdd58e1461027357806301ffc9a71461028657806306f9363c146102a9575b600080fd5b61026061024e36600461322a565b600a6020526000908152604090205481565b6040519081526020015b60405180910390f35b610260610281366004612fca565b6105d9565b610299610294366004613266565b610675565b604051901515815260200161026a565b6102606102b7366004613320565b610680565b6102c4610786565b60405161026a91906135db565b6102c46102df36600461322a565b610814565b6102f76102f23660046131b1565b6108b8565b005b6102f7610307366004612e84565b610b9b565b6102f761031a3660046132ff565b610db1565b61026061032d36600461322a565b60009081526020819052604090206001015490565b61026061035036600461322a565b60096020526000908152604090205481565b6102f7610370366004612d03565b610dc7565b6102f7610383366004613242565b610e69565b610260610e9b565b6102f761039e366004613242565b610eaa565b6103b66103b136600461307d565b610f34565b60405161026a91906135a3565b6102996103d136600461322a565b6000908152600860205260409020546001600160a01b0316151590565b6102f76103fc366004613149565b611095565b6102f761040f366004612e12565b61110a565b6102f761115f565b6102f761042a366004613029565b6111e4565b6102f761043d3660046132ba565b6112a5565b61026061045036600461322a565b6000908152600a602052604090205490565b6001546001600160a01b03165b6040516001600160a01b03909116815260200161026a565b610299610495366004613242565b61130e565b6102c4611337565b610260600081565b6102f76104b8366004612f1a565b611344565b6102607f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a981565b6102606104f236600461322a565b60009081526009602052604090205490565b61046f61051236600461322a565b6008602052600090815260409020546001600160a01b031681565b6102f761053b366004612f4b565b611458565b6102f761054e366004612caf565b611660565b6102607f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102f7610588366004613242565b6116df565b61029961059b366004612ccb565b611707565b6102f76105ae366004612dac565b6117d7565b6102f76105c1366004612caf565b61182e565b6102f76105d4366004612ff5565b611915565b60006001600160a01b03831661064a5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b600061066f8261196a565b600061068e816104956119aa565b806106c2575061069c6119aa565b6001600160a01b03166106b76001546001600160a01b031690565b6001600160a01b0316145b6106de5760405162461bcd60e51b81526004016106419061374e565b838311156106fe5760405162461bcd60e51b8152600401610641906138f5565b6000610708611a07565b9050610712611a18565b61071a6119aa565b600082815260086020526040902080546001600160a01b0319166001600160a01b0392909216919091179055831561075f5761075f6107576119aa565b828686611a2f565b6000818152600960209081526040808320879055600a909152902085905590509392505050565b600b805461079390613a1a565b80601f01602080910402602001604051908101604052809291908181526020018280546107bf90613a1a565b801561080c5780601f106107e15761010080835404028352916020019161080c565b820191906000526020600020905b8154815290600101906020018083116107ef57829003601f168201915b505050505081565b6000818152600860205260409020546060906001600160a01b03166108865760405162461bcd60e51b815260206004820152602260248201527f455243313135355472616461626c653a20746f6b656e206d7573742065786973604482015261747360f01b6064820152608401610641565b600561089183611b12565b6040516020016108a29291906133e5565b6040516020818303038152906040529050919050565b6108c560006104956119aa565b806108f957506108d36119aa565b6001600160a01b03166108ee6001546001600160a01b031690565b6001600160a01b0316145b6109155760405162461bcd60e51b81526004016106419061374e565b81518351146109815760405162461bcd60e51b815260206004820152603260248201527f455243313135355472616461626c653a206d61787320616e6420696e697469616044820152710d8e640d8cadccee8d040dad2e6dac2e8c6d60731b6064820152608401610641565b600083516001600160401b038111156109aa57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156109d3578160200160208202803683370190505b509050600084516001600160401b038111156109ff57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610a28578160200160208202803683370190505b50905060005b8551811015610b80576000868281518110610a5957634e487b7160e01b600052603260045260246000fd5b602002602001015190506000868381518110610a8557634e487b7160e01b600052603260045260246000fd5b6020026020010151905081811115610aaf5760405162461bcd60e51b8152600401610641906138f5565b6000610ab9611a07565b9050610ac3611a18565b610acb6119aa565b600082815260086020908152604080832080546001600160a01b0319166001600160a01b03959095169490941790935560098152828220859055600a90522083905585518190879086908110610b3157634e487b7160e01b600052603260045260246000fd5b60200260200101818152505081858581518110610b5e57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505050508080610b7890613a81565b915050610a2e565b50610b94610b8c6119aa565b838386611c2b565b5050505050565b610bc77f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66104956119aa565b610be35760405162461bcd60e51b815260040161064190613636565b6001600160a01b038416610c4b5760405162461bcd60e51b815260206004820152602960248201527f455243313135355472616461626c653a206d696e7420746f20746865207a65726044820152686f206164647265737360b81b6064820152608401610641565b8151835114610cb55760405162461bcd60e51b815260206004820152603060248201527f455243313135355472616461626c653a2069647320616e6420616d6f756e747360448201526f040d8cadccee8d040dad2e6dac2e8c6d60831b6064820152608401610641565b60005b8351811015610d9e576000848281518110610ce357634e487b7160e01b600052603260045260246000fd5b602002602001015190506000848381518110610d0f57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516000848152600a83526040808220546009909452902054909250610d40908390613975565b1115610d5e5760405162461bcd60e51b815260040161064190613829565b600082815260096020526040902054610d78908290613975565b600092835260096020526040909220919091555080610d9681613a81565b915050610cb8565b50610dab84848484611c2b565b50505050565b610dc3610dbc6119aa565b8383611915565b5050565b610dcf6119aa565b6001600160a01b0316856001600160a01b03161480610df55750610df58561059b6119aa565b610e5c5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610641565b610b948585858585611dad565b600082815260208190526040902060010154610e8c81610e876119aa565b611f79565b610e968383611fdd565b505050565b6000610ea5612062565b905090565b610eb26119aa565b6001600160a01b0316816001600160a01b031614610f2a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610641565b610dc38282612155565b60608151835114610f995760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610641565b600083516001600160401b03811115610fc257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610feb578160200160208202803683370190505b50905060005b845181101561108d5761105285828151811061101d57634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061104557634e487b7160e01b600052603260045260246000fd5b60200260200101516105d9565b82828151811061107257634e487b7160e01b600052603260045260246000fd5b602090810291909101015261108681613a81565b9050610ff1565b509392505050565b610dab6110a06119aa565b8585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061110a92505050565b6111126119aa565b6001600160a01b0316836001600160a01b0316148061113857506111388361059b6119aa565b6111545760405162461bcd60e51b8152600401610641906136c0565b610e968383836121d8565b6111676119aa565b6001600160a01b03166111826001546001600160a01b031690565b6001600160a01b0316146111d85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610641565b6111e2600061238c565b565b6112107f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66104956119aa565b61122c5760405162461bcd60e51b815260040161064190613636565b6000838152600a6020908152604080832054600990925290912054611252908490613975565b11156112705760405162461bcd60e51b815260040161064190613829565b60008381526009602052604090205461128a908390613975565b600084815260096020526040902055610dab84848484611a2f565b6112b260006104956119aa565b806112e657506112c06119aa565b6001600160a01b03166112db6001546001600160a01b031690565b6001600160a01b0316145b6113025760405162461bcd60e51b81526004016106419061374e565b61130b816123de565b50565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600c805461079390613a1a565b816001600160a01b03166113566119aa565b6001600160a01b031614156113bf5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610641565b80600360006113cc6119aa565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556114106119aa565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161144c911515815260200190565b60405180910390a35050565b6114847f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a96104956119aa565b6114ba5760405162461bcd60e51b81526020600482015260076024820152662161636365737360c81b6044820152606401610641565b6001600160a01b0383166114f85760405162461bcd60e51b815260206004820152600560248201526410bab9b2b960d91b6044820152606401610641565b60008080611508848601866131b1565b92509250925081518351146115495760405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b6044820152606401610641565b60005b835181101561164b57600084828151811061157757634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008483815181106115a357634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516000848152600a835260408082205460099094529020549092506115d4908390613975565b111561160b5760405162461bcd60e51b815260040161064190602080825260049082015263042dac2f60e31b604082015260600190565b600082815260096020526040902054611625908290613975565b60009283526009602052604090922091909155508061164381613a81565b91505061154c565b5061165886848484611c2b565b505050505050565b61166d60006104956119aa565b806116a1575061167b6119aa565b6001600160a01b03166116966001546001600160a01b031690565b6001600160a01b0316145b6116bd5760405162461bcd60e51b81526004016106419061374e565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152602081905260409020600101546116fd81610e876119aa565b610e968383612155565b60065460405163c455279160e01b81526001600160a01b03848116600483015260009281169190841690829063c45527919060240160206040518083038186803b15801561175457600080fd5b505afa158015611768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178c919061329e565b6001600160a01b031614156117a557600191505061066f565b6001600160a01b0380851660009081526003602090815260408083209387168352929052205460ff165b949350505050565b6117df6119aa565b6001600160a01b0316856001600160a01b0316148061180557506118058561059b6119aa565b6118215760405162461bcd60e51b8152600401610641906136c0565b610b9485858585856123f1565b6118366119aa565b6001600160a01b03166118516001546001600160a01b031690565b6001600160a01b0316146118a75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610641565b6001600160a01b03811661190c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610641565b61130b8161238c565b61191d6119aa565b6001600160a01b0316836001600160a01b0316148061194357506119438361059b6119aa565b61195f5760405162461bcd60e51b8152600401610641906136c0565b610e9683838361251d565b60006001600160e01b03198216636cdb3d1360e11b148061199b57506001600160e01b031982166303a24d0760e21b145b8061066f575061066f8261262d565b600033301415611a0157600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150611a049050565b50335b90565b60006007546001610ea59190613975565b60078054906000611a2883613a81565b9190505550565b6001600160a01b038416611a555760405162461bcd60e51b8152600401610641906138b4565b6000611a5f6119aa565b9050611a8081600087611a7188612662565b611a7a88612662565b876126bb565b60008481526002602090815260408083206001600160a01b038916845290915281208054859290611ab2908490613975565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610b94816000878787876126c0565b606081611b365750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611b605780611b4a81613a81565b9150611b599050600a8361398d565b9150611b3a565b6000816001600160401b03811115611b8857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611bb2576020820181803683370190505b5090505b84156117cf57611bc76001836139c0565b9150611bd4600a86613a9c565b611bdf906030613975565b60f81b818381518110611c0257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611c24600a8661398d565b9450611bb6565b6001600160a01b038416611c515760405162461bcd60e51b8152600401610641906138b4565b8151835114611c725760405162461bcd60e51b81526004016106419061386c565b6000611c7c6119aa565b9050611c8d816000878787876126bb565b60005b8451811015611d4557838181518110611cb957634e487b7160e01b600052603260045260246000fd5b602002602001015160026000878481518110611ce557634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611d2d9190613975565b90915550819050611d3d81613a81565b915050611c90565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611d969291906135b6565b60405180910390a4610b948160008787878761282b565b8151835114611dce5760405162461bcd60e51b81526004016106419061386c565b6001600160a01b038416611df45760405162461bcd60e51b815260040161064190613709565b6000611dfe6119aa565b9050611e0e8187878787876126bb565b60005b8451811015611f13576000858281518110611e3c57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110611e6857634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526002835260408082206001600160a01b038e168352909352919091205490915081811015611eb95760405162461bcd60e51b8152600401610641906137df565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611ef8908490613975565b9250508190555050505080611f0c90613a81565b9050611e11565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611f639291906135b6565b60405180910390a461165881878787878761282b565b611f83828261130e565b610dc357611f9b816001600160a01b031660146128f5565b611fa68360206128f5565b604051602001611fb792919061348b565b60408051601f198184030181529082905262461bcd60e51b8252610641916004016135db565b611fe7828261130e565b610dc3576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561201e6119aa565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60007f00000000000000000000000000000000000000000000000000000000000000004614156120b157507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b61215f828261130e565b15610dc3576000828152602081815260408083206001600160a01b03851684529091529020805460ff191690556121946119aa565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6001600160a01b0383166121fe5760405162461bcd60e51b81526004016106419061379c565b805182511461221f5760405162461bcd60e51b81526004016106419061386c565b60006122296119aa565b9050612249818560008686604051806020016040528060008152506126bb565b60005b835181101561232d57600084828151811061227757634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008483815181106122a357634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526002835260408082206001600160a01b038c1683529093529190912054909150818110156122f45760405162461bcd60e51b81526004016106419061367c565b60009283526002602090815260408085206001600160a01b038b168652909152909220910390558061232581613a81565b91505061224c565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161237e9291906135b6565b60405180910390a450505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8051610dc3906005906020840190612add565b6001600160a01b0384166124175760405162461bcd60e51b815260040161064190613709565b60006124216119aa565b9050612432818787611a7188612662565b60008481526002602090815260408083206001600160a01b038a168452909152902054838110156124755760405162461bcd60e51b8152600401610641906137df565b60008581526002602090815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906124b4908490613975565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46125148288888888886126c0565b50505050505050565b6001600160a01b0383166125435760405162461bcd60e51b81526004016106419061379c565b600061254d6119aa565b905061257d8185600061255f87612662565b61256887612662565b604051806020016040528060008152506126bb565b60008381526002602090815260408083206001600160a01b0388168452909152902054828110156125c05760405162461bcd60e51b81526004016106419061367c565b60008481526002602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b60006001600160e01b03198216637965db0b60e01b148061066f57506301ffc9a760e01b6001600160e01b031983161461066f565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106126aa57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b611658565b6001600160a01b0384163b156116585760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612704908990899088908890889060040161355e565b602060405180830381600087803b15801561271e57600080fd5b505af192505050801561274e575060408051601f3d908101601f1916820190925261274b91810190613282565b60015b6127fb5761275a613af2565b806308c379a01415612794575061276f613b09565b8061277a5750612796565b8060405162461bcd60e51b815260040161064191906135db565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610641565b6001600160e01b0319811663f23a6e6160e01b146125145760405162461bcd60e51b8152600401610641906135ee565b6001600160a01b0384163b156116585760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061286f9089908990889088908890600401613500565b602060405180830381600087803b15801561288957600080fd5b505af19250505080156128b9575060408051601f3d908101601f191682019092526128b691810190613282565b60015b6128c55761275a613af2565b6001600160e01b0319811663bc197c8160e01b146125145760405162461bcd60e51b8152600401610641906135ee565b606060006129048360026139a1565b61290f906002613975565b6001600160401b0381111561293457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561295e576020820181803683370190505b509050600360fc1b8160008151811061298757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106129c457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006129e88460026139a1565b6129f3906001613975565b90505b6001811115612a87576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612a3557634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110612a5957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93612a8081613a03565b90506129f6565b508315612ad65760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610641565b9392505050565b828054612ae990613a1a565b90600052602060002090601f016020900481019282612b0b5760008555612b51565b82601f10612b2457805160ff1916838001178555612b51565b82800160010185558215612b51579182015b82811115612b51578251825591602001919060010190612b36565b50612b5d929150612b61565b5090565b5b80821115612b5d5760008155600101612b62565b60006001600160401b03831115612b8f57612b8f613adc565b604051612ba6601f8501601f191660200182613a55565b809150838152848484011115612bbb57600080fd5b83836020830137600060208583010152509392505050565b60008083601f840112612be4578182fd5b5081356001600160401b03811115612bfa578182fd5b6020830191508360208260051b8501011115612c1557600080fd5b9250929050565b600082601f830112612c2c578081fd5b81356020612c3982613952565b604051612c468282613a55565b8381528281019150858301600585901b87018401881015612c65578586fd5b855b85811015612c8357813584529284019290840190600101612c67565b5090979650505050505050565b600082601f830112612ca0578081fd5b612ad683833560208501612b76565b600060208284031215612cc0578081fd5b8135612ad681613b92565b60008060408385031215612cdd578081fd5b8235612ce881613b92565b91506020830135612cf881613b92565b809150509250929050565b600080600080600060a08688031215612d1a578081fd5b8535612d2581613b92565b94506020860135612d3581613b92565b935060408601356001600160401b0380821115612d50578283fd5b612d5c89838a01612c1c565b94506060880135915080821115612d71578283fd5b612d7d89838a01612c1c565b93506080880135915080821115612d92578283fd5b50612d9f88828901612c90565b9150509295509295909350565b600080600080600060a08688031215612dc3578081fd5b8535612dce81613b92565b94506020860135612dde81613b92565b9350604086013592506060860135915060808601356001600160401b03811115612e06578182fd5b612d9f88828901612c90565b600080600060608486031215612e26578283fd5b8335612e3181613b92565b925060208401356001600160401b0380821115612e4c578384fd5b612e5887838801612c1c565b93506040860135915080821115612e6d578283fd5b50612e7a86828701612c1c565b9150509250925092565b60008060008060808587031215612e99578182fd5b8435612ea481613b92565b935060208501356001600160401b0380821115612ebf578384fd5b612ecb88838901612c1c565b94506040870135915080821115612ee0578384fd5b612eec88838901612c1c565b93506060870135915080821115612f01578283fd5b50612f0e87828801612c90565b91505092959194509250565b60008060408385031215612f2c578182fd5b8235612f3781613b92565b915060208301358015158114612cf8578182fd5b600080600060408486031215612f5f578081fd5b8335612f6a81613b92565b925060208401356001600160401b0380821115612f85578283fd5b818601915086601f830112612f98578283fd5b813581811115612fa6578384fd5b876020828501011115612fb7578384fd5b6020830194508093505050509250925092565b60008060408385031215612fdc578182fd5b8235612fe781613b92565b946020939093013593505050565b600080600060608486031215613009578081fd5b833561301481613b92565b95602085013595506040909401359392505050565b6000806000806080858703121561303e578182fd5b843561304981613b92565b9350602085013592506040850135915060608501356001600160401b03811115613071578182fd5b612f0e87828801612c90565b6000806040838503121561308f578182fd5b82356001600160401b03808211156130a5578384fd5b818501915085601f8301126130b8578384fd5b813560206130c582613952565b6040516130d28282613a55565b8381528281019150858301600585901b870184018b10156130f1578889fd5b8896505b8487101561311c57803561310881613b92565b8352600196909601959183019183016130f5565b5096505086013592505080821115613132578283fd5b5061313f85828601612c1c565b9150509250929050565b6000806000806040858703121561315e578182fd5b84356001600160401b0380821115613174578384fd5b61318088838901612bd3565b90965094506020870135915080821115613198578384fd5b506131a587828801612bd3565b95989497509550505050565b6000806000606084860312156131c5578081fd5b83356001600160401b03808211156131db578283fd5b6131e787838801612c1c565b945060208601359150808211156131fc578283fd5b61320887838801612c1c565b9350604086013591508082111561321d578283fd5b50612e7a86828701612c90565b60006020828403121561323b578081fd5b5035919050565b60008060408385031215613254578182fd5b823591506020830135612cf881613b92565b600060208284031215613277578081fd5b8135612ad681613ba7565b600060208284031215613293578081fd5b8151612ad681613ba7565b6000602082840312156132af578081fd5b8151612ad681613b92565b6000602082840312156132cb578081fd5b81356001600160401b038111156132e0578182fd5b8201601f810184136132f0578182fd5b6117cf84823560208401612b76565b60008060408385031215613311578182fd5b50508035926020909101359150565b600080600060608486031215613334578081fd5b833592506020840135915060408401356001600160401b03811115613357578182fd5b612e7a86828701612c90565b6000815180845260208085019450808401835b8381101561339257815187529582019590820190600101613376565b509495945050505050565b600081518084526133b58160208601602086016139d7565b601f01601f19169290920160200192915050565b600081516133db8185602086016139d7565b9290920192915050565b600080845482600182811c91508083168061340157607f831692505b602080841082141561342157634e487b7160e01b87526022600452602487fd5b818015613435576001811461344657613472565b60ff19861689528489019650613472565b60008b815260209020885b8681101561346a5781548b820152908501908301613451565b505084890196505b50505050505061348281856133c9565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516134c38160178501602088016139d7565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516134f48160288401602088016139d7565b01602801949350505050565b6001600160a01b0386811682528516602082015260a06040820181905260009061352c90830186613363565b828103606084015261353e8186613363565b90508281036080840152613552818561339d565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906135989083018461339d565b979650505050505050565b602081526000612ad66020830184613363565b6040815260006135c96040830185613363565b82810360208401526134828185613363565b602081526000612ad6602083018461339d565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526026908201527f455243313135355472616461626c653a206d7573742068617665206d696e74656040820152657220726f6c6560d01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602e908201527f455243313135355472616461626c653a206d75737420686176652061646d696e60408201526d206f72206f776e657220726f6c6560901b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526023908201527f455243313135355472616461626c653a204d617820737570706c7920726561636040820152621a195960ea1b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6020808252603e908201527f455243313135355472616461626c653a20496e697469616c20737570706c792060408201527f63616e6e6f74206265206d6f7265207468616e206d617820737570706c790000606082015260800190565b60006001600160401b0382111561396b5761396b613adc565b5060051b60200190565b6000821982111561398857613988613ab0565b500190565b60008261399c5761399c613ac6565b500490565b60008160001904831182151516156139bb576139bb613ab0565b500290565b6000828210156139d2576139d2613ab0565b500390565b60005b838110156139f25781810151838201526020016139da565b83811115610dab5750506000910152565b600081613a1257613a12613ab0565b506000190190565b600181811c90821680613a2e57607f821691505b60208210811415613a4f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b0381118282101715613a7a57613a7a613adc565b6040525050565b6000600019821415613a9557613a95613ab0565b5060010190565b600082613aab57613aab613ac6565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115611a0457600481823e5160e01c90565b600060443d1015613b175790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715613b4657505050505090565b8285019150815181811115613b5e5750505050505090565b843d8701016020828501011115613b785750505050505090565b613b8760208286010187613a55565b509095945050505050565b6001600160a01b038116811461130b57600080fd5b6001600160e01b03198116811461130b57600080fdfea2646970667358221220195efc1f2d8e33c8a5305e8fa3551944720491322db875df25f9da079070019964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "See {EIP712-DOMAIN_SEPARATOR}."
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "create(uint256,uint256,bytes)": {
        "details": "Creates a new token type and assigns _initial to a sender",
        "params": {
          "_data": "Optional data to pass if receiver is contract",
          "_initial": "Optional amount to supply the first owner",
          "_max": "max supply allowed"
        },
        "returns": {
          "tokenId": "The newly created token ID"
        }
      },
      "createBatch(uint256[],uint256[],bytes)": {
        "details": "Creates some amount of tokens type and assigns initials to a sender",
        "params": {
          "_initials": "Optional amount to supply the first owner",
          "_maxs": "max supply allowed"
        }
      },
      "deposit(address,bytes)": {
        "details": "Should be callable only by ChildChainManager Should handle deposit by minting the required tokens for user Make sure minting is done only by this function",
        "params": {
          "depositData": "abi encoded ids array and amounts array",
          "user": "user address for whom deposit is being done"
        }
      },
      "exists(uint256)": {
        "details": "Returns whether the specified token exists by checking to see if it has a creator",
        "params": {
          "_id": "uint256 ID of the token to query the existence of"
        },
        "returns": {
          "_0": "bool whether the token exists"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "maxSupply(uint256)": {
        "details": "Returns the max quantity for a token ID",
        "params": {
          "_id": "uint256 ID of the token to query"
        },
        "returns": {
          "_0": "amount of token in existence"
        }
      },
      "mint(address,uint256,uint256,bytes)": {
        "details": "Mints some amount of tokens to an address",
        "params": {
          "_data": "Data to pass if receiver is contract",
          "_id": "Token ID to mint",
          "_quantity": "Amount of tokens to mint",
          "_to": "Address of the future owner of the token"
        }
      },
      "mintBatch(address,uint256[],uint256[],bytes)": {
        "details": "Mint tokens for each id in _ids",
        "params": {
          "_data": "Data to pass if receiver is contract",
          "_ids": "Array of ids to mint",
          "_quantities": "Array of amounts of tokens to mint per id",
          "_to": "The address to mint tokens to"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setBaseMetadataURI(string)": {
        "details": "Will update the base URL of token's URI",
        "params": {
          "_newBaseMetadataURI": "New base URL of token's URI"
        }
      },
      "setProxyRegistryAddress(address)": {
        "details": "Will update the proxyRegistryAddress",
        "params": {
          "_newProxyRegistryAddress": "New proxyRegistryAddress"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Returns the total quantity for a token ID",
        "params": {
          "_id": "uint256 ID of the token to query"
        },
        "returns": {
          "_0": "amount of token in existence"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawBatch(uint256[],uint256[])": {
        "details": "Should burn user's tokens. This transaction will be verified when exiting on root chain",
        "params": {
          "amounts": "amounts to withdraw",
          "ids": "ids to withdraw"
        }
      },
      "withdrawSingle(uint256,uint256)": {
        "details": "Should burn user's tokens. This transaction will be verified when exiting on root chain",
        "params": {
          "amount": "amount to withdraw",
          "id": "id to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(address,bytes)": {
        "notice": "called when tokens are deposited on root chain"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings."
      },
      "withdrawBatch(uint256[],uint256[])": {
        "notice": "called when user wants to batch withdraw tokens back to root chain"
      },
      "withdrawSingle(uint256,uint256)": {
        "notice": "called when user wants to withdraw single token back to root chain"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/ERC1155/CryptoKombatCollectionEthereum.sol:CryptoKombatCollectionEthereum",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 387,
        "contract": "contracts/ERC1155/CryptoKombatCollectionEthereum.sol:CryptoKombatCollectionEthereum",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 549,
        "contract": "contracts/ERC1155/CryptoKombatCollectionEthereum.sol:CryptoKombatCollectionEthereum",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 555,
        "contract": "contracts/ERC1155/CryptoKombatCollectionEthereum.sol:CryptoKombatCollectionEthereum",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 557,
        "contract": "contracts/ERC1155/CryptoKombatCollectionEthereum.sol:CryptoKombatCollectionEthereum",
        "label": "_uri",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 4618,
        "contract": "contracts/ERC1155/CryptoKombatCollectionEthereum.sol:CryptoKombatCollectionEthereum",
        "label": "baseMetadataURI",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 4620,
        "contract": "contracts/ERC1155/CryptoKombatCollectionEthereum.sol:CryptoKombatCollectionEthereum",
        "label": "proxyRegistryAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4623,
        "contract": "contracts/ERC1155/CryptoKombatCollectionEthereum.sol:CryptoKombatCollectionEthereum",
        "label": "_currentTokenID",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4627,
        "contract": "contracts/ERC1155/CryptoKombatCollectionEthereum.sol:CryptoKombatCollectionEthereum",
        "label": "creators",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4631,
        "contract": "contracts/ERC1155/CryptoKombatCollectionEthereum.sol:CryptoKombatCollectionEthereum",
        "label": "tokenSupply",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4635,
        "contract": "contracts/ERC1155/CryptoKombatCollectionEthereum.sol:CryptoKombatCollectionEthereum",
        "label": "tokenMaxSupply",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4637,
        "contract": "contracts/ERC1155/CryptoKombatCollectionEthereum.sol:CryptoKombatCollectionEthereum",
        "label": "name",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 4639,
        "contract": "contracts/ERC1155/CryptoKombatCollectionEthereum.sol:CryptoKombatCollectionEthereum",
        "label": "symbol",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/ERC1155/CryptoKombatCollectionEthereum.sol:CryptoKombatCollectionEthereum",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/ERC1155/CryptoKombatCollectionEthereum.sol:CryptoKombatCollectionEthereum",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}