/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type KombatStructStruct = {
  user: string;
  collection: string;
  heroId: BigNumberish;
  consumables: BigNumberish[];
};

export type KombatStructStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber[]
] & {
  user: string;
  collection: string;
  heroId: BigNumber;
  consumables: BigNumber[];
};

export interface KombatGameInterface extends utils.Interface {
  functions: {
    "AUTOMATION_ROLE()": FunctionFragment;
    "BASE_BP()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "arenaShare()": FunctionFragment;
    "arenas()": FunctionFragment;
    "collectionBsc()": FunctionFragment;
    "collectionEth()": FunctionFragment;
    "consumables()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "processPVPKombat((address,address,uint256,uint256[]),(address,address,uint256,uint256[]),uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setShares(uint256,uint256,uint256)": FunctionFragment;
    "setTreasure(address)": FunctionFragment;
    "setWinReward(uint256)": FunctionFragment;
    "stakerShare()": FunctionFragment;
    "stakingContract()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "treasure()": FunctionFragment;
    "vombat()": FunctionFragment;
    "winReward()": FunctionFragment;
    "winnerShare()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AUTOMATION_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BASE_BP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "arenaShare",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "arenas", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collectionBsc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "consumables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "processPVPKombat",
    values: [KombatStructStruct, KombatStructStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setShares",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTreasure", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWinReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "treasure", values?: undefined): string;
  encodeFunctionData(functionFragment: "vombat", values?: undefined): string;
  encodeFunctionData(functionFragment: "winReward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "winnerShare",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "AUTOMATION_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BASE_BP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "arenaShare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "arenas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectionBsc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processPVPKombat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWinReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasure", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vombat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "winnerShare",
    data: BytesLike
  ): Result;

  events: {
    "PVPKombat(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SharesSet(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PVPKombat"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SharesSet"): EventFragment;
}

export type PVPKombatEvent = TypedEvent<
  [string, string],
  { winner: string; loser: string }
>;

export type PVPKombatEventFilter = TypedEventFilter<PVPKombatEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type SharesSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { winnerShare: BigNumber; stakerShare: BigNumber; arenaShare: BigNumber }
>;

export type SharesSetEventFilter = TypedEventFilter<SharesSetEvent>;

export interface KombatGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KombatGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AUTOMATION_ROLE(overrides?: CallOverrides): Promise<[string]>;

    BASE_BP(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    arenaShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    arenas(overrides?: CallOverrides): Promise<[string]>;

    collectionBsc(overrides?: CallOverrides): Promise<[string]>;

    collectionEth(overrides?: CallOverrides): Promise<[string]>;

    consumables(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    processPVPKombat(
      winner: KombatStructStruct,
      loser: KombatStructStruct,
      arenaId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setShares(
      _winnerShare: BigNumberish,
      _stakerShare: BigNumberish,
      _arenaShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasure(
      _treasure: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWinReward(
      _winReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingContract(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    treasure(overrides?: CallOverrides): Promise<[string]>;

    vombat(overrides?: CallOverrides): Promise<[string]>;

    winReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    winnerShare(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  AUTOMATION_ROLE(overrides?: CallOverrides): Promise<string>;

  BASE_BP(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  arenaShare(overrides?: CallOverrides): Promise<BigNumber>;

  arenas(overrides?: CallOverrides): Promise<string>;

  collectionBsc(overrides?: CallOverrides): Promise<string>;

  collectionEth(overrides?: CallOverrides): Promise<string>;

  consumables(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  processPVPKombat(
    winner: KombatStructStruct,
    loser: KombatStructStruct,
    arenaId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setShares(
    _winnerShare: BigNumberish,
    _stakerShare: BigNumberish,
    _arenaShare: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasure(
    _treasure: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWinReward(
    _winReward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakerShare(overrides?: CallOverrides): Promise<BigNumber>;

  stakingContract(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  treasure(overrides?: CallOverrides): Promise<string>;

  vombat(overrides?: CallOverrides): Promise<string>;

  winReward(overrides?: CallOverrides): Promise<BigNumber>;

  winnerShare(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    AUTOMATION_ROLE(overrides?: CallOverrides): Promise<string>;

    BASE_BP(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    arenaShare(overrides?: CallOverrides): Promise<BigNumber>;

    arenas(overrides?: CallOverrides): Promise<string>;

    collectionBsc(overrides?: CallOverrides): Promise<string>;

    collectionEth(overrides?: CallOverrides): Promise<string>;

    consumables(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    processPVPKombat(
      winner: KombatStructStruct,
      loser: KombatStructStruct,
      arenaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setShares(
      _winnerShare: BigNumberish,
      _stakerShare: BigNumberish,
      _arenaShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasure(_treasure: string, overrides?: CallOverrides): Promise<void>;

    setWinReward(
      _winReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakerShare(overrides?: CallOverrides): Promise<BigNumber>;

    stakingContract(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    treasure(overrides?: CallOverrides): Promise<string>;

    vombat(overrides?: CallOverrides): Promise<string>;

    winReward(overrides?: CallOverrides): Promise<BigNumber>;

    winnerShare(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "PVPKombat(address,address)"(
      winner?: string | null,
      loser?: string | null
    ): PVPKombatEventFilter;
    PVPKombat(
      winner?: string | null,
      loser?: string | null
    ): PVPKombatEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "SharesSet(uint256,uint256,uint256)"(
      winnerShare?: BigNumberish | null,
      stakerShare?: BigNumberish | null,
      arenaShare?: BigNumberish | null
    ): SharesSetEventFilter;
    SharesSet(
      winnerShare?: BigNumberish | null,
      stakerShare?: BigNumberish | null,
      arenaShare?: BigNumberish | null
    ): SharesSetEventFilter;
  };

  estimateGas: {
    AUTOMATION_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    BASE_BP(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    arenaShare(overrides?: CallOverrides): Promise<BigNumber>;

    arenas(overrides?: CallOverrides): Promise<BigNumber>;

    collectionBsc(overrides?: CallOverrides): Promise<BigNumber>;

    collectionEth(overrides?: CallOverrides): Promise<BigNumber>;

    consumables(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processPVPKombat(
      winner: KombatStructStruct,
      loser: KombatStructStruct,
      arenaId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setShares(
      _winnerShare: BigNumberish,
      _stakerShare: BigNumberish,
      _arenaShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasure(
      _treasure: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWinReward(
      _winReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakerShare(overrides?: CallOverrides): Promise<BigNumber>;

    stakingContract(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    treasure(overrides?: CallOverrides): Promise<BigNumber>;

    vombat(overrides?: CallOverrides): Promise<BigNumber>;

    winReward(overrides?: CallOverrides): Promise<BigNumber>;

    winnerShare(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    AUTOMATION_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BASE_BP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    arenaShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    arenas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectionBsc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectionEth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    consumables(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processPVPKombat(
      winner: KombatStructStruct,
      loser: KombatStructStruct,
      arenaId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setShares(
      _winnerShare: BigNumberish,
      _stakerShare: BigNumberish,
      _arenaShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasure(
      _treasure: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWinReward(
      _winReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasure(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vombat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    winReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    winnerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
