/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface VombatFaucetInterface extends utils.Interface {
  contractName: "VombatFaucet";
  functions: {
    "allowedToWithdraw(address)": FunctionFragment;
    "requestTokens()": FunctionFragment;
    "tokenAmount()": FunctionFragment;
    "vombat()": FunctionFragment;
    "waitTime()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowedToWithdraw",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vombat", values?: undefined): string;
  encodeFunctionData(functionFragment: "waitTime", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "allowedToWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vombat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "waitTime", data: BytesLike): Result;

  events: {};
}

export interface VombatFaucet extends BaseContract {
  contractName: "VombatFaucet";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VombatFaucetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowedToWithdraw(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    requestTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    vombat(overrides?: CallOverrides): Promise<[string]>;

    waitTime(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  allowedToWithdraw(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  requestTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

  vombat(overrides?: CallOverrides): Promise<string>;

  waitTime(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    allowedToWithdraw(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requestTokens(overrides?: CallOverrides): Promise<void>;

    tokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    vombat(overrides?: CallOverrides): Promise<string>;

    waitTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    allowedToWithdraw(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    vombat(overrides?: CallOverrides): Promise<BigNumber>;

    waitTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allowedToWithdraw(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vombat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    waitTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
